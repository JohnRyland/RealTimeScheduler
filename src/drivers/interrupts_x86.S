.code32

.globl load_idt
load_idt:
.globl _load_idt
_load_idt:
  # Load Interrupt Descriptor Table
  lidt   idt32ptr
  ret

# Interrupt descriptor table
idt:
  #   P = present
  #   DPL = 2-bit ring level
  #   GT = gate type ( b0101 = task, b1110 = interrupt, b1111 = trap)
  #
  #                                    DPL GT reserved
  #                                   P||0|--||------|
  #        offset 0-15      segment       flags       offset 16-31
  #     |----------------| |-------| |---------------| |-----|
  .word isr_entry_1+ 0*5+0, 0x0008, 0b1110111000000000, 0x0000
  .word isr_entry_1+ 1*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 2*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 3*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 4*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 5*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 6*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 7*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 8*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+ 9*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+10*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+11*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+12*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+13*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+14*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+15*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+16*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+17*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+18*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+19*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+20*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+21*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+22*5+0, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+23*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+24*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+25*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+26*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+27*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+28*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+29*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+30*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+31*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+32*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+33*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+34*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+35*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+36*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+37*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+38*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+39*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+40*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+41*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+42*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+43*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+44*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+45*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+46*5+2, 0x0008, 0b1110111011101110, 0x0000
  .word isr_entry_1+47*5+2, 0x0008, 0b1110111011101110, 0x0000
idt_end:

idt32ptr:
  .word idt_end - idt - 1
  .long idt

# .org 0x8102
# .equ isr_entry_1,0x8102
isr_entry_1:
  .byte 0x60,0x6a,0x00,0xeb,22*5  # pushal ; pushl $INTERRUPT_NUM ; jmp double_jump
  .byte 0x60,0x6a,0x01,0xeb,21*5
  .byte 0x60,0x6a,0x02,0xeb,20*5
  .byte 0x60,0x6a,0x03,0xeb,19*5
  .byte 0x60,0x6a,0x04,0xeb,18*5
  .byte 0x60,0x6a,0x05,0xeb,17*5
  .byte 0x60,0x6a,0x06,0xeb,16*5
  .byte 0x60,0x6a,0x07,0xeb,15*5
  .byte 0x60,0x6a,0x08,0xeb,14*5
  .byte 0x60,0x6a,0x09,0xeb,13*5
  .byte 0x60,0x6a,0x0a,0xeb,12*5
  .byte 0x60,0x6a,0x0b,0xeb,11*5
  .byte 0x60,0x6a,0x0c,0xeb,10*5
  .byte 0x60,0x6a,0x0d,0xeb, 9*5
  .byte 0x60,0x6a,0x0e,0xeb, 8*5
  .byte 0x60,0x6a,0x0f,0xeb, 7*5
  .byte 0x60,0x6a,0x10,0xeb, 6*5
  .byte 0x60,0x6a,0x11,0xeb, 5*5
  .byte 0x60,0x6a,0x12,0xeb, 4*5
  .byte 0x60,0x6a,0x13,0xeb, 3*5
  .byte 0x60,0x6a,0x14,0xeb, 2*5
  .byte 0x60,0x6a,0x15,0xeb, 1*5
  .byte 0x60,0x6a,0x16,0xeb, 0*5
double_jump:
  jmp    generic_isr
  .byte 0x60,0x6a,0x17,0xeb,24*5  # pushal ; pushl $INTERRUPT_NUM ; jmp generic_isr
  .byte 0x60,0x6a,0x18,0xeb,23*5
  .byte 0x60,0x6a,0x19,0xeb,22*5
  .byte 0x60,0x6a,0x1a,0xeb,21*5
  .byte 0x60,0x6a,0x1b,0xeb,20*5
  .byte 0x60,0x6a,0x1c,0xeb,19*5
  .byte 0x60,0x6a,0x1d,0xeb,18*5
  .byte 0x60,0x6a,0x1e,0xeb,17*5
  .byte 0x60,0x6a,0x1f,0xeb,16*5
  .byte 0x60,0x6a,0x20,0xeb,15*5
  .byte 0x60,0x6a,0x21,0xeb,14*5
  .byte 0x60,0x6a,0x22,0xeb,13*5
  .byte 0x60,0x6a,0x23,0xeb,12*5
  .byte 0x60,0x6a,0x24,0xeb,11*5
  .byte 0x60,0x6a,0x25,0xeb,10*5
  .byte 0x60,0x6a,0x26,0xeb, 9*5
  .byte 0x60,0x6a,0x27,0xeb, 8*5
  .byte 0x60,0x6a,0x28,0xeb, 7*5
  .byte 0x60,0x6a,0x29,0xeb, 6*5
  .byte 0x60,0x6a,0x2a,0xeb, 5*5
  .byte 0x60,0x6a,0x2b,0xeb, 4*5
  .byte 0x60,0x6a,0x2c,0xeb, 3*5
  .byte 0x60,0x6a,0x2d,0xeb, 2*5
  .byte 0x60,0x6a,0x2e,0xeb, 1*5
  .byte 0x60,0x6a,0x2f,0xeb, 0*5
generic_isr:
  cli    # disable interrupts
  cld
  call   _interrupt_handler  # Up to the handler check the In-Service-Register and send EOI as required
  popl   %eax
  popal
  iret

